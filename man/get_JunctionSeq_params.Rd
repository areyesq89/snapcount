% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/junction_seq.R
\name{get_JunctionSeq_params}
\alias{get_JunctionSeq_params}
\alias{output_example_function_calls}
\title{Formats Snapcount results in a form that can be easily passed into
the third-party package, JunctionSeq.}
\usage{
get_JunctionSeq_params(query_builders, group_names, gene)

output_example_function_calls(js_params)
}
\arguments{
\item{query_builders}{A list of 1 of more QueryBuilder objects.}

\item{group_names}{A vector of strings representing tissue groups.}

\item{gene}{The name of the gene to match with the exon and gene
query results.}

\item{js_params}{An object returned from call to \code{get_JunctionSeq_params}.}

\item{sample_names}{A vector of strings representing sample names.}
}
\value{
\code{get_JunctionSeq_params} returns an object containing the necessary
parameters needed by calls to \code{JunctionSeq::readJunctionSeqCounts} and
\code{JunctionSeq::plotJunctionSeqResultsForGene}.

\code{output_example_function_calls} outputs the necessary JunctionSeq
calls needed to produce a plot.
}
\description{
This allows for the visualization of junction counts along with
their associated gene and exon counts in the context of a gene
model. Performance is dependent on the total number of junctions
and the length of the gene model i.e. larger gene regions may
either completely fail to draw or take too long to be visualized.
}
\examples{
\dontrun{
sb1 <- QueryBuilder(compilation = "gtex", regions = "chr7:128393029-128394277")
sb1 <- set_row_filters(sb1, contains == 1, coverage_sum >= 1000)
sb1 <- set_column_filters(sb1, SMTS == "Brain")

sb2 <- set_column_filters(sb1, SMTS == "Pituitary")

sb3 <- set_column_filters(sb2, SMTS == "Spleen")

js <- get_JunctionSeq_params(
    query_builders = list(sb1, sb2, sb3),
    gene = "IMPDH1",
    group_names = list("Brain", "Pituitary", "Spleen")
)

output_example_function_calls(js)
}
}
